# https://packaging.python.org/en/latest/guides/writing-pyproject-toml/

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "host-inspector"
description = "A simple python package to gather host information from Windows, Mac and Linux. Returns host data as dicts to be used internally or sent to front-end dashboard applications as JSON."
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
    "humanize>=4.12.3",
    "psutil>=7.0.0",
    "py-machineid>=0.8.0",
]

dynamic = ["version", "readme"]
requires-python = ">=3.10"
authors = [
  { name = "Tim Santor", email = "tsantor@xstudios.com" },
]

[dependency-groups]
dev=[]
test=[
    "coverage>=7.6.1",
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.1",
]

[project.urls]
# Homepage = "https://xstudios.com"
# Documentation = "https://readthedocs.org//host-inspector"
Repository = "https://github.com/tsantor/host-inspector.git"
Issues = "https://github.com/tsantor/host-inspector/issues"
Changelog = "https://github.com/tsantor/host-inspector/blob/master/HISTORY.md"

[tool.setuptools.packages.find]
# https://setuptools.pypa.io/en/latest/userguide/datafiles.html
where = ["src"]

[tool.setuptools.dynamic]
version = { attr = "host_inspector.__version__" }
readme = { file = ["README.md", "HISTORY.md"], content-type = "text/markdown" }

# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
# addopts = "--ds=django_project.settings --reuse-db"
python_files = ["tests.py", "test_*.py"]
norecursedirs = ["node_modules"]
filterwarnings = "ignore::DeprecationWarning"
pythonpath = "src"

# ==== Coverage ====
[tool.coverage.run]
include = ["*/host_inspector/**/*.py"]
omit = ["*/migrations/*", "*/tests/*"]
# plugins = []

[tool.coverage.report]
exclude_also = [
  "def __repr__",
  # "def __str__",
]

# ==== mypy ====
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
# plugins = []

[[tool.mypy.overrides]]
# Django migrations should not produce any errors:
module = "*.migrations.*"
ignore_errors = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "*/migrations/*.py",
  "staticfiles/*",
]
# Same as Django: https://github.com/cookiecutter/cookiecutter-django/issues/4792.
line-length = 88
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
select = [
  "F",
  "E",
  "W",
  "C90",
  "I",
  "N",
  "UP",
  "YTT",
  # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
  "ASYNC",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "COM",
  "C4",
  "DTZ",
  "T10",
  "DJ",
  "EM",
  "EXE",
  "FA",
  'ISC',
  "ICN",
  "G",
  'INP',
  'PIE',
  "T20",
  'PYI',
  'PT',
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SLOT",
  "SIM",
  "TID",
  "TCH",
  "INT",
  # "ARG", # Unused function argument
  "PTH",
  "ERA",
  "PD",
  "PGH",
  "PL",
  "TRY",
  "FLY",
  # "NPY",
  # "AIR",
  "PERF",
  # "FURB",
  # "LOG",
  "RUF",
]
ignore = [
  "S101",   # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "SIM102", # sometimes it's better to nest
  "ERA001",
  "PGH004",
  "E501",
]
# Project specifc ignore
extend-ignore = [
  "S106",   # hardcoded password in tests
  "RUF005", # iterable unpacking instead of concatenation
  "S104",   # Possible binding to all interfaces,
  "S311",   # We're not using it for cryptography
  "FBT001", # Boolean typed positional argument
  "FBT002", # Boolean default positional argument
  "S308",   # mark_safe is ok here
  # "SLF001"  # accessing private _meta is ok here
  "TRY300", # Consider moving this statement to an `else` block
  "COM812", # Recommended from ruff
  "ISC001", # Recommended from ruff
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
force-single-line = true
